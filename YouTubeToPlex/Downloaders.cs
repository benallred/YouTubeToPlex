using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using YoutubeExplode;
using YoutubeExplode.Converter;
using YoutubeExplode.Videos.ClosedCaptions;
using YoutubeExplode.Videos.Streams;
using YouTubeToPlex.MediaServerHelpers;
using YTVideo = YoutubeExplode.Videos.Video;

namespace YouTubeToPlex
{
	internal static class Downloaders
	{
		public static void DownloadVideo(YoutubeClient client, YTVideo video, string downloadFolder, string videoFileNameBase, IProgress<double> progress)
		{
			var converter = new YoutubeConverter(client, Ffmpeg.DefaultFilePath);

			var mediaStreamInfoSet = client.Videos.Streams.GetManifestAsync(video.Id).Result;
			var videoStreamInfo = mediaStreamInfoSet.GetVideoOnly().OrderByDescending(info => info.VideoQuality).ThenByDescending(info => info.Framerate).First();
			var audioStreamInfo = mediaStreamInfoSet.GetAudioOnly().OrderByDescending(info => info.Bitrate).First();

			var extension = videoStreamInfo.Container.Name;

			converter.DownloadAndProcessMediaStreamsAsync(
					new IStreamInfo[] { videoStreamInfo, audioStreamInfo },
					Path.Combine(downloadFolder, videoFileNameBase + $".{extension}"),
					extension,
					progress)
				.Wait();
		}

		public static void DownloadAllCaptions(YoutubeClient client, YTVideo video, string downloadFolder, string videoFileNameBase, IProgress<double> progress)
		{
			var closedCaptionTrackInfos = client.Videos.ClosedCaptions.GetManifestAsync(video.Id).Result;

			DownloadCaptionsForLanguage(client, closedCaptionTrackInfos.Tracks, "en", downloadFolder, videoFileNameBase, progress);
			DownloadCaptionsForLanguage(client, closedCaptionTrackInfos.Tracks, "ko", downloadFolder, videoFileNameBase, progress);
		}

		private static void DownloadCaptionsForLanguage(YoutubeClient client, IReadOnlyList<ClosedCaptionTrackInfo> closedCaptionTrackInfos, string languageCode, string downloadFolder, string videoFileNameBase, IProgress<double> progress)
		{
			var languageCaptions = closedCaptionTrackInfos.Where(info => !info.IsAutoGenerated && info.Language.Code == languageCode);
			languageCaptions
				.OrderBy(info => info.Language.Name.Contains("DTVCC") ? 1 : 2)
				.FirstOrDefault()
				.Do(info =>
				{
					Console.WriteLine();
					Console.WriteLine($"  0.00% \t{info.Language} captions");
					Console.SetCursorPosition(0, Console.CursorTop - 1);
					try
					{
						client.Videos.ClosedCaptions.DownloadAsync(info,
								Path.Combine(downloadFolder, $"{videoFileNameBase}.{languageCode}.srt"),
								progress)
							.Wait();
					}
					catch (Exception ex)
					{
						Console.WriteLine();
						Console.Write("\t\tError downloading captions: " + ex.Message);
					}
				});
		}
	}
}
